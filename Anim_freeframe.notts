import { Vec2 } from './Vec2.js'
import { Dict } from './util.js'

import { Debug } from './Debug.js'

export type MilliCountdown = number;

export class Chrono {
	count: MilliCountdown;
	interval: number;
	active: boolean = true;

	constructor( count: MilliCountdown, interval: number ) {
		this.count = count;
		this.interval = interval;
	}

	reset() {
		this.count = this.interval;
	}

	update( elapsed: number ) {
		if ( this.active && this.count > 0 ) {
			this.count -= elapsed;
		}

		if ( this.count < 0 ) this.count = 0;
	}
}

type AnimValue = number | boolean | Vec2 | string;

type AnimFunc = {
	caller: any;
	funcName: string;
	args?: Array<any>
	
	_run?: boolean;
}

type AnimTarget = {
	value: AnimValue;

	_inProgress?: boolean

	// set one of these
	expireOnCount?: MilliCountdown
	expireOnReach?: boolean
	reachOnCount?: MilliCountdown
	expireOnStack?: boolean

	readOnly?: boolean // Anim doesn't update the value, only checks for completeness

	setDefault?: boolean // update the frame at Anim.stack[0] on completion

	overrideRate?: number; // override the rate from the AnimField
    derivNo?: number; // 0 for value, 1 for first derivative
}

export enum Pass {
	FREE_FIELDS = 0,
	ALL_OTHER_FIELDS,
	NONE,
}

export class AnimFrame {
	targets: Dict<AnimTarget>;
	funcs: Array<AnimFunc>;
	pass: Pass;

	constructor( targets: Dict<AnimTarget>, funcs: Array<AnimFunc> = [], pass: Pass=Pass.FREE_FIELDS ) {
		this.targets = targets;
		this.funcs = funcs;
		this.pass = pass;
	}

	inProgress(): boolean {
		for ( let key in this.targets ) {
			if ( this.targets[key]._inProgress ) {
				return true;
			}
		}

		for ( let func of this.funcs ) {
			if ( !func._run ) {
				return true;
			}
		}

		return false;
	}
}

function getRate( step: number, elapsed: number, targetKey: string, field: AnimField, target: AnimTarget ): number {
	let rate = 0;

	rate = field.rate;
	if ( target.overrideRate ) rate = target.overrideRate;

	if ( rate < 0 ) {
		throw new Error( 'Anim.getRate: negative rate for field ' + targetKey );
	}

	return rate * step;
}

type AnimFieldOptions = {
	isFree?: boolean;
	isAngle?: boolean
	downrate?: number;
	accel?: number;
}

export class AnimField {
	obj: any;
	varname: string; // obj[varname]: number | Vec2 | boolean

	isFree: boolean;
	isAngle: boolean;

	rate: number;
	downrate: number

	constructor( obj: any, varname: string, rate: number=0, options: AnimFieldOptions={} ) {
		if ( !obj ) return;

		if ( !( varname in obj ) ) {
			throw new Error( 'AnimField.constructor: no field ' + varname + ' in ' + obj ); 
		}

		if ( options.isFree === undefined ) options.isFree = false;
		if ( options.isAngle === undefined ) options.isAngle = false;

		this.obj = obj;
		this.varname = varname;
		this.rate = Math.abs( rate );

		this.isFree = options.isFree;
		this.isAngle = options.isAngle;
	}
}

export class PhysField extends AnimField {
	derivname: string; // obj[derivname]: number | Vec2

	accel: number;

	constructor( obj: any, varname: string, derivname: string, rate: number=1, options: AnimFieldOptions={} ) {
		super( obj, varname, rate, options );

		if ( !obj ) return;

		if ( !( derivname in obj ) ) {
			throw new Error( 'PhysicalField.constructor: no field ' + varname + ' in ' + obj ); 
		}

		if ( options.accel === undefined ) options.accel = 0.1;

		let typesOk = false;
		if ( obj[varname] instanceof Vec2 && obj[derivname] instanceof Vec2 ) {
			typesOk = true;
		} else if ( typeof obj[varname] == 'number' && typeof obj[derivname] == 'number' ) {
			typesOk = true;
		}
   
		if ( !typesOk ) {
			throw new Error( 'PhysField.constructor: types must be both Vec2 or both number ( ' + 
							 typeof obj[varname] + ', ' + typeof obj[derivname] );
		}

		this.derivname = derivname;
		this.accel = Math.abs( options.accel );
	}

	zero() {
		if ( this.obj[this.derivname] instanceof Vec2 ) {
			this.obj[this.derivname].zero();

		} else if ( typeof this.obj[this.derivname]  == 'number' ) {
			this.obj[this.derivname] = 0;

		} else {
			if ( Debug.LOG_ANIM ) {
				console.warn( 'PhysField.zero: no method to zero type ' + ( typeof this.obj[this.derivname] ) );
			}
		}
	}

	updateVec2( step: number, elapsed: number, targetKey: string, target: AnimTarget ) {
		if ( !( target.value instanceof Vec2 ) ) {
			throw new Error( 'Anim.update: expected Vec2 or number target for field ' + targetKey );
		}

		let rate = getRate( step, elapsed, targetKey, this, target );

		let d0 = this.obj[this.varname] as Vec2;
		let d1 = this.obj[this.derivname] as Vec2;

		let diff = target.value.minus( d0 );

		if ( target.reachOnCount + elapsed > 0 ) {
			rate = diff.length() * elapsed / ( target.reachOnCount + elapsed );
		}		

		// instantaneous acceleration
		if ( !target.derivNo ) {
			if ( diff.length() <= rate || !rate ) {
				d1.set( diff ); // phys.value will hit target when deriv is added

				if ( target.expireOnReach ) target._inProgress = false;

			} else {
				d1.set( diff.unit().times( rate ) );
			}

		// real-number acceleration
		} else if ( target.derivNo == 1 ) {
			// continuous physics ( tv - t^2 / 2 * a = d )
			// let stopDist = d1.length() ** 2 / ( 2 * field.accel );

			// discrete physics stopDist = ( nv - n(n+1)a/2 = d )
			// 

		}
	}

	updateNumber( step: number, elapsed: number, targetKey: string, target: AnimTarget ) {
		if ( !( typeof target.value == 'number' ) ) {
			throw new Error( 'Anim.update: expected Vec2 or number target for field ' + targetKey );
		}

		let rate = getRate( step, elapsed, targetKey, this, target );

		let d0 = this.obj[this.varname] as number;

		let diff = d0 - target.value;

		if ( this.isAngle ) {
			target.value = normalizeAngle( target.value );
			diff = normalizeAngle( diff );
		}

		if ( target.reachOnCount + elapsed > 0 ) {
			rate = Math.abs( diff ) * elapsed / ( target.reachOnCount + elapsed );
		}		

		// instantaneous acceleration
		if ( !target.derivNo ) {
			if ( Math.abs( diff ) <= rate || !rate ) {
				this.obj[this.derivname] = target.value - d0; // phys.value will hit target when deriv is added

				if ( target.expireOnReach ) target._inProgress = false;

			} else if ( diff < 0 ) {
				this.obj[this.derivname] = rate;

			} else { // diff > 0
				this.obj[this.derivname] = -rate;
			}

		// real-number acceleration
		} else if ( target.derivNo == 1 ) {
			// continuous physics ( tv - t^2 / 2 * a = d )
			// let stopDist = d1.length() ** 2 / ( 2 * field.accel );

			// discrete physics stopDist = ( nv - n(n+1)a/2 = d )
			// 

		}
	}
}

let animId = 0;

function normalizeAngle( angle: number ): number {
	angle %= ( Math.PI * 2 );

	if ( angle > Math.PI ) angle -= Math.PI * 2;
	if ( angle < -Math.PI) angle += Math.PI * 2;

	return angle;
}

export class Anim {
	name: string = 'anim' + ( animId++ );
	fields: Dict<AnimField>;
	fieldGroups: Dict<Array<string>> = {};
	stack: Array<AnimFrame> = [];

	constructor( fields: Dict<AnimField>={}, frame: AnimFrame ) {
		this.fields = fields;
		if ( frame ) this.pushFrame( frame );
	}

	addGroup( groupKey: string, fieldKeys: Array<string> ) {
		if ( groupKey in this.fields ) {
			throw new Error( 'Anim.addGroup: failed to add group, same key as field (' + groupKey + ')' );
		}

		if ( fieldKeys.length == 0 ) {
			throw new Error( 'Anim.addGroup: no keys in group ' + groupKey );
		}

		for ( let key of fieldKeys ) {
			if ( !( key in this.fields ) ) {
				throw new Error( 'Anim.addGroup: failed to add group ' + groupKey + ', no field ' + key );
			}
		}

		this.fieldGroups[groupKey] = fieldKeys;
	}

	initTargetObj( targetKey: string, target: AnimTarget ) {
		let value: any;

		if ( targetKey in this.fields ) {
			let field = this.fields[targetKey];
		
			value = field.obj[field.varname];

		} else {
			let varnames = targetKey.split( '.' );

			let fieldKey = varnames[0];
			if ( !( fieldKey in this.fields ) ) {
				throw new Error( 'Anim.initTargetObj: no field ' + fieldKey + ' in fields' ); 
			}

			let obj: any = this.fields[fieldKey].obj;

			for ( let i = 0; i < varnames.length - 1; i++ ) {
				if ( !( varnames[i] in obj ) ) {
					throw new Error( 'Anim.initTargetObj: no field ' + varnames[i] + ' in ' + varnames.slice( 0, i ).join('.') );
				}

				obj = obj[varnames[i]];
			}

			value = obj[varnames.slice( -1 )[0]];
		}

		// type check
		if ( typeof target.value != typeof value ) {
			let msg = '(' + typeof target.value + ' != '  + typeof value + ')';

			throw new Error( 'Anim.initTargetObj: type mismatch for key ' + targetKey + ' ' + msg );
		}

		let canUse = false;
		if ( typeof target.value == 'boolean' ) canUse = true;
		if ( typeof target.value == 'number' ) canUse = true;
		if ( typeof target.value == 'string' ) canUse = true;
		if ( target.value instanceof Vec2 ) canUse = true;
		
		if ( !canUse ) {
			throw new Error( 'Anim.initTargetObj: Unhandled target value type ' + typeof target.value );
		}
	}

	initFrame( frame: AnimFrame ): boolean {
		let removeKeys: Array<string> = [];
		let addTargets: Dict<AnimTarget> = {};

		// unroll groups
		for ( let key in frame.targets ) {
			if ( !( key in this.fieldGroups ) ) continue; 

			for ( let fieldKey of this.fieldGroups[key] ) {
				if ( fieldKey in frame.targets ) {
					console.warn( 'Anim.initFrame: duplicate target ' + fieldKey + ' in group ' + key + ', ignoring' );
					continue;
				}

				let copy = Object.assign( {}, frame.targets[key] );
				addTargets[fieldKey] = copy;
			}

			removeKeys.push( key );
		}

		for ( let key of removeKeys ) delete frame.targets[key];
		for ( let key in addTargets ) frame.targets[key] = addTargets[key];

		// init targets
		for ( let key in frame.targets ) {
			let target = frame.targets[key];

			this.initTargetObj( key, target );

			if ( target.expireOnCount < 0 ) {
				console.warn( 'Anim.pushFrame: negative expireOnCount, ignoring frame' );
			}

			if ( target.reachOnCount < 0 ) {
				console.warn( 'Anim.pushFrame: negative reachOnCount, ignoring frame' );
			}

			if ( target.expireOnReach || 
				 target.expireOnStack ||
				 target.expireOnCount > 0 ||
				 target.reachOnCount > 0 ) {
				target._inProgress = true;
			}
		}

		for ( let func of frame.funcs ) {
			if ( !func.caller ) {
				throw new Error( 'Anim.initFrame: no caller object for function ' + func.funcName );
			}

			let type = typeof func.caller[func.funcName];
			if ( type != 'function' ) {
				throw new Error( 'Anim.initFrame: ' + func.funcName + ' is a not a function (' + type + ')' );
			}
		}

		if ( frame.inProgress() || this.stack.length == 0 ) {
			return true;

		} else {
			return false
		}
	}

	unshiftFrame( frame: AnimFrame ) {
		if ( this.initFrame( frame ) ) {
			if ( this.stack.length == 0 ) {
				this.stack.push( frame );	
			} else {
				this.stack.splice( 1, 0, frame );
			}

			if ( Debug.LOG_ANIM ) {
				console.log( this.name + ': pushed frame ' + (this.stack.length - 1) + 
							 ' ' + JSON.stringify( frame.targets ) );
			}
		} else {
			console.warn( 'Anim.unshiftFrame: ignoring frame ' + JSON.stringify( frame.targets ) + ' (no expiry set)');
		}
	}

	pushFrame( frame: AnimFrame ) {
		if ( this.initFrame( frame ) ) {
			this.stack.push( frame );

			if ( Debug.LOG_ANIM ) {
				console.log( this.name + ': pushed frame ' + (this.stack.length - 1) + 
							 ' ' + JSON.stringify( frame.targets ) );
			}
		} else {
			console.warn( 'Anim.pushFrame: ignoring frame ' + JSON.stringify( frame.targets ) + ' (no expiry set)');
		}
	}

	getValue( field: AnimField, targetKey: string ): AnimValue {
		if ( targetKey in this.fields ) {
			return field.obj[field.varname];
		}
			
		let varnames = targetKey.split( '.' );

		let obj: any = field.obj;

		for ( let i = 0; i < varnames.length - 1; i++ ) {
			if ( !( varnames[i] in obj ) ) {
				throw new Error( 'Anim.getValue: no field ' + varnames[i] + ' in ' + varnames.slice( 0, i ).join('.') );
			}

			obj = obj[varnames[i]];
		}

		return obj[varnames.slice( -1 )[0]];
	}

	setValue( field: AnimField, targetKey: string, value: AnimValue ) {
		if ( targetKey in this.fields ) {
			field.obj[field.varname] = value;

			return;
		}

		let varnames = targetKey.split( '.' );

		let obj: any = field.obj;

		for ( let i = 0; i < varnames.length - 1; i++ ) {
			if ( !( varnames[i] in obj ) ) {
				throw new Error( 'Anim.getValue: no field ' + varnames[i] + ' in ' + varnames.slice( 0, i ).join('.') );
			}

			obj = obj[varnames[i]];
		}

		obj[varnames.slice( -1 )[0]] = value;
	}

	updateNumber( step: number, elapsed: number, targetKey: string, field: AnimField, target: AnimTarget ) {
		if ( typeof target.value != 'number' ) {
			throw new Error( 'Anim.update: expected number target for field ' + targetKey );
		}

		/*if ( typeof field.rate != 'number' ) {
			throw new Error( 'Anim.update: expected number rate for field ' + key );
		}*/

		if ( !target.readOnly ) {
			let value = this.getValue( field, targetKey ) as number;
			let rate = getRate( step, elapsed, targetKey, field, target );

			let diff = value - target.value;

			if ( field.isAngle ) {
				target.value = normalizeAngle( target.value );
				diff = normalizeAngle( diff );
			}

			if ( target.reachOnCount + elapsed > 0 ) {
				rate = Math.abs( diff ) * elapsed / ( target.reachOnCount + elapsed );
			}

			if ( Math.abs( diff ) <= rate || !rate ) {
				value = target.value;

			} else if ( diff < 0 ) {
				value += rate;

			} else { // diff > 0
				value -= rate;
			}

			this.setValue( field, targetKey, value );
		}

		if ( this.getValue( field, targetKey ) == target.value && target.expireOnReach ) {
			target._inProgress = false;
		}
	}

	updateString( step: number, elapsed: number, targetKey: string, field: AnimField, target: AnimTarget ) {
		if ( typeof target.value != 'string' ) {
			throw new Error( 'Anim.update: expected string target for field ' + targetKey );
		}

		let value = field.obj[field.varname] as string;
		let rate = getRate( step, elapsed, targetKey, field, target );

		if ( target.value.indexOf( value ) < 0 ) {
			value = '';
		}

		let diff = Math.abs( target.value.length - value.length );

		if ( target.reachOnCount + elapsed > 0 ) {
			rate = diff * elapsed / ( target.reachOnCount + elapsed );
		}

		rate = Math.floor( rate );

		if ( diff <= rate || !rate ) {
			value = target.value;

			if ( target.expireOnReach ) target._inProgress = false;
		
		} else {
			value = target.value.slice( 0, value.length + rate );
		}

		field.obj[field.varname] = value;
	}

	updateVec2( step: number, elapsed: number, targetKey: string, field: AnimField, target: AnimTarget ) {
		if ( !( target.value instanceof Vec2 ) ) {
			throw new Error( 'Anim.update: expected Vec2 target for field ' + targetKey );
		}

		/*if ( !( field.rate instanceof Vec2 ) ) {
			throw new Error( 'Anim.update: expected number rate for field ' + key );
		}*/

		if ( !target.readOnly ) {
			let value = this.getValue( field, targetKey ) as Vec2;
			let rate = getRate( step, elapsed, targetKey, field, target );
			let diff = target.value.minus( value );

			if ( target.reachOnCount + elapsed > 0 ) {
				rate = diff.length() * elapsed / ( target.reachOnCount + elapsed );
			}

			if ( diff.length() <= rate || !rate ) {
				value.set( target.value );

			} else {
				value.add( diff.unit().times( rate ) );
			}
		}

		if ( ( this.getValue( field, targetKey ) as Vec2 ).equals( target.value ) && target.expireOnReach ) {
			target._inProgress = false;
		}
	}

	/**
	 * Mostly the same as updateVec2, except that obj.derivname is modified based on obj.varname
	 * 
	 * @param {number}     step    [description]
	 * @param {number}     elapsed [description]
	 * @param {string}     key     [description]
	 * @param {PhysField}  field   [description]
	 * @param {AnimTarget} target  [description]
	 */
	updatePhysical( step: number, elapsed: number, targetKey: string, field: PhysField, target: AnimTarget ) {
		if ( field.obj[field.varname] instanceof Vec2 ) {
			field.updateVec2( step, elapsed, targetKey, target );

		} else if ( typeof field.obj[field.varname] == 'number' ) {
			field.updateNumber( step, elapsed, targetKey, target );
		
		} else {
			if ( Debug.LOG_ANIM ) {
				console.warn( this.name + ': ' + ' no method to update PhysField' );
			}
		}
	}

	update( step: number, elapsed: number ): boolean {
		if ( this.stack.length == 0 ) return;

		let prevLength = this.stack.length;

		//let frame = this.stack.slice( -1 )[0];

		let blockedFields: Dict<boolean> = {};
		let physUpdated: Dict<boolean> = {};

		let topIndex = this.stack.length - 1;

		// update
		for ( let i = this.stack.length - 1; i >= 0; i-- ) {
			let frame = this.stack[i];

			for ( let key in frame.targets ) {
				if ( key in blockedFields ) continue;

				let target = frame.targets[key];
				let fieldKey = key.split( '.' )[0];
				let field = this.fields[fieldKey];

				if ( target.expireOnStack && i == topIndex ) {
					target._inProgress = false;
				}

				if ( target.expireOnCount && target.expireOnCount > 0 ) {
					target.expireOnCount -= elapsed;
					if ( target.expireOnCount <= 0 ) target._inProgress = false;
				}

				if ( target.reachOnCount && target.reachOnCount > 0 ) {
					target.reachOnCount -= elapsed;
					if ( target.reachOnCount <= 0 ) target._inProgress = false;	
				}

				let value = this.getValue( field, key );

				if ( typeof value == 'boolean' ) {
					if ( typeof target.value != 'boolean' ) {
						throw new Error( 'Anim.update: expected boolean target for field ' + key );
					}
					
					if ( !target.readOnly ) {
						this.setValue( field, key, target.value );
					}

					if ( this.getValue( field, key ) == target.value && target.expireOnReach ) {
						target._inProgress = false;
					}

				} else if ( field instanceof PhysField ) {
					this.updatePhysical( step, elapsed, key, field, target );

					physUpdated[key] = true;

				} else if ( typeof value == 'number' ) {
					this.updateNumber( step, elapsed, key, field, target );

				} else if ( typeof value == 'string' ) {
					this.updateString( step, elapsed, key, field, target );

				} else if ( value instanceof Vec2 ) {
					this.updateVec2( step, elapsed, key, field, target );
				}
			}

			// only run functions from the topmost frame of the stack
			if ( i == this.stack.length - 1 ) {
				for ( let func of frame.funcs ) {
					if ( !func._run ) {
						func.caller[func.funcName].apply( func.caller, func.args );

						func._run = true;
					}
				}
			}

			// clean stack
			if ( !frame.inProgress() && i > 0 ) {
				this.stack.splice( i, 1 );

				this.completeFrame( frame );
			}

			this.blockFields( frame, blockedFields );

			let allBlocked = true;
			for ( let key in this.fields ) {
				if ( !( key in blockedFields ) ) {
					allBlocked = false;
				}
			}
			if ( allBlocked ) break;
		}

        // cancel velocities for physical fields we are currently ignoring
        for ( let key in this.fields ) {
            let field = this.fields[key];

            if ( field instanceof PhysField && !( key in physUpdated ) ) {
            	field.zero();
            }
        }

		return this.stack.length != prevLength;
	}

	blockFields( frame: AnimFrame, blockedFields: Dict<boolean> ) {

		// block updates down the stack
		for ( let key in frame.targets ) {
			blockedFields[key] = true;
		}

		if ( frame.pass == Pass.FREE_FIELDS ) {
			for ( let key in this.fields ) {
				if ( !this.fields[key].isFree ) blockedFields[key] = true;
			}

		} else if ( frame.pass == Pass.ALL_OTHER_FIELDS ) {
			// done above

		} else if  ( frame.pass == Pass.NONE ) {
			for ( let key in this.fields ) {
				blockedFields[key] = true;
			}
		}
	}

	completeFrame( frame: AnimFrame ) {

		// optionally set new defaults
		for ( let key in frame.targets ) {
			if ( frame.targets[key].setDefault ) {
				if ( !( key in this.stack[0].targets ) ) {
					console.warn( 'Anim.update: no default target for ' + key );
				
				} else {
					this.stack[0].targets[key].value = frame.targets[key].value;
				}
			}
		}

		if ( Debug.LOG_ANIM ) {
			console.log( this.name + ': completed frame ' + this.stack.length + 
						 ' ' + JSON.stringify( frame.targets ) );
		}
	}

	clear() {
		this.stack = this.stack.slice( 0, 1 );

		if ( Debug.LOG_ANIM ) {
			console.log( this.name + ': cleared stack' );
		}
	}
}